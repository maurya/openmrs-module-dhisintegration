//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.01 at 10:09:16 PM IST 
//


package org.openmrs.module.dhisintegration.api.jaxb;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="status" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="dataValueCount">
 *           &lt;complexType>
 *             &lt;simpleContent>
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>integer">
 *                 &lt;attribute name="imported" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *                 &lt;attribute name="updated" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *                 &lt;attribute name="ignored" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *               &lt;/extension>
 *             &lt;/simpleContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="conflicts" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="conflict" maxOccurs="unbounded" minOccurs="0">
 *                     &lt;complexType>
 *                       &lt;simpleContent>
 *                         &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
 *                           &lt;attribute name="object" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="value" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/extension>
 *                       &lt;/simpleContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="datasetComplete" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "status",
    "description",
    "dataValueCount",
    "conflicts",
    "datasetComplete"
})
@XmlRootElement(name = "importSummary")
public class ImportSummary
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected String status;
    @XmlElement(required = true)
    protected String description;
    @XmlElement(required = true)
    protected ImportSummary.DataValueCount dataValueCount;
    protected ImportSummary.Conflicts conflicts;
    @XmlElement(required = true)
    protected String datasetComplete;

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the dataValueCount property.
     * 
     * @return
     *     possible object is
     *     {@link ImportSummary.DataValueCount }
     *     
     */
    public ImportSummary.DataValueCount getDataValueCount() {
        return dataValueCount;
    }

    /**
     * Sets the value of the dataValueCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImportSummary.DataValueCount }
     *     
     */
    public void setDataValueCount(ImportSummary.DataValueCount value) {
        this.dataValueCount = value;
    }

    /**
     * Gets the value of the conflicts property.
     * 
     * @return
     *     possible object is
     *     {@link ImportSummary.Conflicts }
     *     
     */
    public ImportSummary.Conflicts getConflicts() {
        return conflicts;
    }

    /**
     * Sets the value of the conflicts property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImportSummary.Conflicts }
     *     
     */
    public void setConflicts(ImportSummary.Conflicts value) {
        this.conflicts = value;
    }

    /**
     * Gets the value of the datasetComplete property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDatasetComplete() {
        return datasetComplete;
    }

    /**
     * Sets the value of the datasetComplete property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDatasetComplete(String value) {
        this.datasetComplete = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            ImportSummary.DataValueCount theDataValueCount;
            theDataValueCount = this.getDataValueCount();
            strategy.appendField(locator, this, "dataValueCount", buffer, theDataValueCount);
        }
        {
            ImportSummary.Conflicts theConflicts;
            theConflicts = this.getConflicts();
            strategy.appendField(locator, this, "conflicts", buffer, theConflicts);
        }
        {
            String theDatasetComplete;
            theDatasetComplete = this.getDatasetComplete();
            strategy.appendField(locator, this, "datasetComplete", buffer, theDatasetComplete);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImportSummary)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ImportSummary that = ((ImportSummary) object);
        {
            String lhsStatus;
            lhsStatus = this.getStatus();
            String rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            ImportSummary.DataValueCount lhsDataValueCount;
            lhsDataValueCount = this.getDataValueCount();
            ImportSummary.DataValueCount rhsDataValueCount;
            rhsDataValueCount = that.getDataValueCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataValueCount", lhsDataValueCount), LocatorUtils.property(thatLocator, "dataValueCount", rhsDataValueCount), lhsDataValueCount, rhsDataValueCount)) {
                return false;
            }
        }
        {
            ImportSummary.Conflicts lhsConflicts;
            lhsConflicts = this.getConflicts();
            ImportSummary.Conflicts rhsConflicts;
            rhsConflicts = that.getConflicts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conflicts", lhsConflicts), LocatorUtils.property(thatLocator, "conflicts", rhsConflicts), lhsConflicts, rhsConflicts)) {
                return false;
            }
        }
        {
            String lhsDatasetComplete;
            lhsDatasetComplete = this.getDatasetComplete();
            String rhsDatasetComplete;
            rhsDatasetComplete = that.getDatasetComplete();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "datasetComplete", lhsDatasetComplete), LocatorUtils.property(thatLocator, "datasetComplete", rhsDatasetComplete), lhsDatasetComplete, rhsDatasetComplete)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            ImportSummary.DataValueCount theDataValueCount;
            theDataValueCount = this.getDataValueCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataValueCount", theDataValueCount), currentHashCode, theDataValueCount);
        }
        {
            ImportSummary.Conflicts theConflicts;
            theConflicts = this.getConflicts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conflicts", theConflicts), currentHashCode, theConflicts);
        }
        {
            String theDatasetComplete;
            theDatasetComplete = this.getDatasetComplete();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "datasetComplete", theDatasetComplete), currentHashCode, theDatasetComplete);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ImportSummary) {
            final ImportSummary copy = ((ImportSummary) draftCopy);
            if (this.status!= null) {
                String sourceStatus;
                sourceStatus = this.getStatus();
                String copyStatus = ((String) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.dataValueCount!= null) {
                ImportSummary.DataValueCount sourceDataValueCount;
                sourceDataValueCount = this.getDataValueCount();
                ImportSummary.DataValueCount copyDataValueCount = ((ImportSummary.DataValueCount) strategy.copy(LocatorUtils.property(locator, "dataValueCount", sourceDataValueCount), sourceDataValueCount));
                copy.setDataValueCount(copyDataValueCount);
            } else {
                copy.dataValueCount = null;
            }
            if (this.conflicts!= null) {
                ImportSummary.Conflicts sourceConflicts;
                sourceConflicts = this.getConflicts();
                ImportSummary.Conflicts copyConflicts = ((ImportSummary.Conflicts) strategy.copy(LocatorUtils.property(locator, "conflicts", sourceConflicts), sourceConflicts));
                copy.setConflicts(copyConflicts);
            } else {
                copy.conflicts = null;
            }
            if (this.datasetComplete!= null) {
                String sourceDatasetComplete;
                sourceDatasetComplete = this.getDatasetComplete();
                String copyDatasetComplete = ((String) strategy.copy(LocatorUtils.property(locator, "datasetComplete", sourceDatasetComplete), sourceDatasetComplete));
                copy.setDatasetComplete(copyDatasetComplete);
            } else {
                copy.datasetComplete = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ImportSummary();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="conflict" maxOccurs="unbounded" minOccurs="0">
     *           &lt;complexType>
     *             &lt;simpleContent>
     *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
     *                 &lt;attribute name="object" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="value" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/extension>
     *             &lt;/simpleContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "conflict"
    })
    public static class Conflicts
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        protected List<ImportSummary.Conflicts.Conflict> conflict;

        /**
         * Gets the value of the conflict property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the conflict property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getConflict().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ImportSummary.Conflicts.Conflict }
         * 
         * 
         */
        public List<ImportSummary.Conflicts.Conflict> getConflict() {
            if (conflict == null) {
                conflict = new ArrayList<ImportSummary.Conflicts.Conflict>();
            }
            return this.conflict;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ImportSummary.Conflicts.Conflict> theConflict;
                theConflict = (((this.conflict!= null)&&(!this.conflict.isEmpty()))?this.getConflict():null);
                strategy.appendField(locator, this, "conflict", buffer, theConflict);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ImportSummary.Conflicts)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ImportSummary.Conflicts that = ((ImportSummary.Conflicts) object);
            {
                List<ImportSummary.Conflicts.Conflict> lhsConflict;
                lhsConflict = (((this.conflict!= null)&&(!this.conflict.isEmpty()))?this.getConflict():null);
                List<ImportSummary.Conflicts.Conflict> rhsConflict;
                rhsConflict = (((that.conflict!= null)&&(!that.conflict.isEmpty()))?that.getConflict():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "conflict", lhsConflict), LocatorUtils.property(thatLocator, "conflict", rhsConflict), lhsConflict, rhsConflict)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ImportSummary.Conflicts.Conflict> theConflict;
                theConflict = (((this.conflict!= null)&&(!this.conflict.isEmpty()))?this.getConflict():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conflict", theConflict), currentHashCode, theConflict);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ImportSummary.Conflicts) {
                final ImportSummary.Conflicts copy = ((ImportSummary.Conflicts) draftCopy);
                if ((this.conflict!= null)&&(!this.conflict.isEmpty())) {
                    List<ImportSummary.Conflicts.Conflict> sourceConflict;
                    sourceConflict = (((this.conflict!= null)&&(!this.conflict.isEmpty()))?this.getConflict():null);
                    @SuppressWarnings("unchecked")
                    List<ImportSummary.Conflicts.Conflict> copyConflict = ((List<ImportSummary.Conflicts.Conflict> ) strategy.copy(LocatorUtils.property(locator, "conflict", sourceConflict), sourceConflict));
                    copy.conflict = null;
                    if (copyConflict!= null) {
                        List<ImportSummary.Conflicts.Conflict> uniqueConflictl = copy.getConflict();
                        uniqueConflictl.addAll(copyConflict);
                    }
                } else {
                    copy.conflict = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ImportSummary.Conflicts();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;simpleContent>
         *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
         *       &lt;attribute name="object" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="value" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/extension>
         *   &lt;/simpleContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Conflict
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlValue
            protected String value;
            @XmlAttribute(name = "object")
            protected String object;
            @XmlAttribute(name = "value")
            protected String valueAttribute;

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Gets the value of the object property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getObject() {
                return object;
            }

            /**
             * Sets the value of the object property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setObject(String value) {
                this.object = value;
            }

            /**
             * Gets the value of the valueAttribute property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValueAttribute() {
                return valueAttribute;
            }

            /**
             * Sets the value of the valueAttribute property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValueAttribute(String value) {
                this.valueAttribute = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theValue;
                    theValue = this.getValue();
                    strategy.appendField(locator, this, "value", buffer, theValue);
                }
                {
                    String theObject;
                    theObject = this.getObject();
                    strategy.appendField(locator, this, "object", buffer, theObject);
                }
                {
                    String theValueAttribute;
                    theValueAttribute = this.getValueAttribute();
                    strategy.appendField(locator, this, "valueAttribute", buffer, theValueAttribute);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ImportSummary.Conflicts.Conflict)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ImportSummary.Conflicts.Conflict that = ((ImportSummary.Conflicts.Conflict) object);
                {
                    String lhsValue;
                    lhsValue = this.getValue();
                    String rhsValue;
                    rhsValue = that.getValue();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                        return false;
                    }
                }
                {
                    String lhsObject;
                    lhsObject = this.getObject();
                    String rhsObject;
                    rhsObject = that.getObject();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "object", lhsObject), LocatorUtils.property(thatLocator, "object", rhsObject), lhsObject, rhsObject)) {
                        return false;
                    }
                }
                {
                    String lhsValueAttribute;
                    lhsValueAttribute = this.getValueAttribute();
                    String rhsValueAttribute;
                    rhsValueAttribute = that.getValueAttribute();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "valueAttribute", lhsValueAttribute), LocatorUtils.property(thatLocator, "valueAttribute", rhsValueAttribute), lhsValueAttribute, rhsValueAttribute)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theValue;
                    theValue = this.getValue();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
                }
                {
                    String theObject;
                    theObject = this.getObject();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "object", theObject), currentHashCode, theObject);
                }
                {
                    String theValueAttribute;
                    theValueAttribute = this.getValueAttribute();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueAttribute", theValueAttribute), currentHashCode, theValueAttribute);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof ImportSummary.Conflicts.Conflict) {
                    final ImportSummary.Conflicts.Conflict copy = ((ImportSummary.Conflicts.Conflict) draftCopy);
                    if (this.value!= null) {
                        String sourceValue;
                        sourceValue = this.getValue();
                        String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                        copy.setValue(copyValue);
                    } else {
                        copy.value = null;
                    }
                    if (this.object!= null) {
                        String sourceObject;
                        sourceObject = this.getObject();
                        String copyObject = ((String) strategy.copy(LocatorUtils.property(locator, "object", sourceObject), sourceObject));
                        copy.setObject(copyObject);
                    } else {
                        copy.object = null;
                    }
                    if (this.valueAttribute!= null) {
                        String sourceValueAttribute;
                        sourceValueAttribute = this.getValueAttribute();
                        String copyValueAttribute = ((String) strategy.copy(LocatorUtils.property(locator, "valueAttribute", sourceValueAttribute), sourceValueAttribute));
                        copy.setValueAttribute(copyValueAttribute);
                    } else {
                        copy.valueAttribute = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new ImportSummary.Conflicts.Conflict();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;simpleContent>
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>integer">
     *       &lt;attribute name="imported" type="{http://www.w3.org/2001/XMLSchema}integer" />
     *       &lt;attribute name="updated" type="{http://www.w3.org/2001/XMLSchema}integer" />
     *       &lt;attribute name="ignored" type="{http://www.w3.org/2001/XMLSchema}integer" />
     *     &lt;/extension>
     *   &lt;/simpleContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class DataValueCount
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected BigInteger value;
        @XmlAttribute(name = "imported")
        protected BigInteger imported;
        @XmlAttribute(name = "updated")
        protected BigInteger updated;
        @XmlAttribute(name = "ignored")
        protected BigInteger ignored;

        /**
         * Gets the value of the value property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setValue(BigInteger value) {
            this.value = value;
        }

        /**
         * Gets the value of the imported property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getImported() {
            return imported;
        }

        /**
         * Sets the value of the imported property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setImported(BigInteger value) {
            this.imported = value;
        }

        /**
         * Gets the value of the updated property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getUpdated() {
            return updated;
        }

        /**
         * Sets the value of the updated property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setUpdated(BigInteger value) {
            this.updated = value;
        }

        /**
         * Gets the value of the ignored property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getIgnored() {
            return ignored;
        }

        /**
         * Sets the value of the ignored property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setIgnored(BigInteger value) {
            this.ignored = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigInteger theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                BigInteger theImported;
                theImported = this.getImported();
                strategy.appendField(locator, this, "imported", buffer, theImported);
            }
            {
                BigInteger theUpdated;
                theUpdated = this.getUpdated();
                strategy.appendField(locator, this, "updated", buffer, theUpdated);
            }
            {
                BigInteger theIgnored;
                theIgnored = this.getIgnored();
                strategy.appendField(locator, this, "ignored", buffer, theIgnored);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ImportSummary.DataValueCount)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ImportSummary.DataValueCount that = ((ImportSummary.DataValueCount) object);
            {
                BigInteger lhsValue;
                lhsValue = this.getValue();
                BigInteger rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                BigInteger lhsImported;
                lhsImported = this.getImported();
                BigInteger rhsImported;
                rhsImported = that.getImported();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "imported", lhsImported), LocatorUtils.property(thatLocator, "imported", rhsImported), lhsImported, rhsImported)) {
                    return false;
                }
            }
            {
                BigInteger lhsUpdated;
                lhsUpdated = this.getUpdated();
                BigInteger rhsUpdated;
                rhsUpdated = that.getUpdated();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "updated", lhsUpdated), LocatorUtils.property(thatLocator, "updated", rhsUpdated), lhsUpdated, rhsUpdated)) {
                    return false;
                }
            }
            {
                BigInteger lhsIgnored;
                lhsIgnored = this.getIgnored();
                BigInteger rhsIgnored;
                rhsIgnored = that.getIgnored();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ignored", lhsIgnored), LocatorUtils.property(thatLocator, "ignored", rhsIgnored), lhsIgnored, rhsIgnored)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigInteger theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                BigInteger theImported;
                theImported = this.getImported();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imported", theImported), currentHashCode, theImported);
            }
            {
                BigInteger theUpdated;
                theUpdated = this.getUpdated();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "updated", theUpdated), currentHashCode, theUpdated);
            }
            {
                BigInteger theIgnored;
                theIgnored = this.getIgnored();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ignored", theIgnored), currentHashCode, theIgnored);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ImportSummary.DataValueCount) {
                final ImportSummary.DataValueCount copy = ((ImportSummary.DataValueCount) draftCopy);
                if (this.value!= null) {
                    BigInteger sourceValue;
                    sourceValue = this.getValue();
                    BigInteger copyValue = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.setValue(copyValue);
                } else {
                    copy.value = null;
                }
                if (this.imported!= null) {
                    BigInteger sourceImported;
                    sourceImported = this.getImported();
                    BigInteger copyImported = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "imported", sourceImported), sourceImported));
                    copy.setImported(copyImported);
                } else {
                    copy.imported = null;
                }
                if (this.updated!= null) {
                    BigInteger sourceUpdated;
                    sourceUpdated = this.getUpdated();
                    BigInteger copyUpdated = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "updated", sourceUpdated), sourceUpdated));
                    copy.setUpdated(copyUpdated);
                } else {
                    copy.updated = null;
                }
                if (this.ignored!= null) {
                    BigInteger sourceIgnored;
                    sourceIgnored = this.getIgnored();
                    BigInteger copyIgnored = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "ignored", sourceIgnored), sourceIgnored));
                    copy.setIgnored(copyIgnored);
                } else {
                    copy.ignored = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ImportSummary.DataValueCount();
        }

    }

}
