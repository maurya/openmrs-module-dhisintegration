//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.25 at 12:24:27 AM IST 
//


package org.openmrs.module.dhisintegration.api.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for CategoriesType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CategoriesType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="category" maxOccurs="unbounded" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="concept" minOccurs="0">
 *                     &lt;complexType>
 *                       &lt;simpleContent>
 *                         &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
 *                           &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *                           &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/extension>
 *                       &lt;/simpleContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                   &lt;element name="dataDimension" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="categoryOptions">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;sequence>
 *                             &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
 *                               &lt;complexType>
 *                                 &lt;simpleContent>
 *                                   &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
 *                                     &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                     &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                     &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                     &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *                                     &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                   &lt;/extension>
 *                                 &lt;/simpleContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                           &lt;/sequence>
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *                 &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *                 &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CategoriesType", propOrder = {
    "category"
})
public class CategoriesType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<CategoriesType.Category> category;

    /**
     * Gets the value of the category property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the category property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCategory().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CategoriesType.Category }
     * 
     * 
     */
    public List<CategoriesType.Category> getCategory() {
        if (category == null) {
            category = new ArrayList<CategoriesType.Category>();
        }
        return this.category;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<CategoriesType.Category> theCategory;
            theCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
            strategy.appendField(locator, this, "category", buffer, theCategory);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CategoriesType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CategoriesType that = ((CategoriesType) object);
        {
            List<CategoriesType.Category> lhsCategory;
            lhsCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
            List<CategoriesType.Category> rhsCategory;
            rhsCategory = (((that.category!= null)&&(!that.category.isEmpty()))?that.getCategory():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<CategoriesType.Category> theCategory;
            theCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CategoriesType) {
            final CategoriesType copy = ((CategoriesType) draftCopy);
            if ((this.category!= null)&&(!this.category.isEmpty())) {
                List<CategoriesType.Category> sourceCategory;
                sourceCategory = (((this.category!= null)&&(!this.category.isEmpty()))?this.getCategory():null);
                @SuppressWarnings("unchecked")
                List<CategoriesType.Category> copyCategory = ((List<CategoriesType.Category> ) strategy.copy(LocatorUtils.property(locator, "category", sourceCategory), sourceCategory));
                copy.category = null;
                if (copyCategory!= null) {
                    List<CategoriesType.Category> uniqueCategoryl = copy.getCategory();
                    uniqueCategoryl.addAll(copyCategory);
                }
            } else {
                copy.category = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CategoriesType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="concept" minOccurs="0">
     *           &lt;complexType>
     *             &lt;simpleContent>
     *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
     *                 &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
     *                 &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/extension>
     *             &lt;/simpleContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *         &lt;element name="dataDimension" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="categoryOptions">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;sequence>
     *                   &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
     *                     &lt;complexType>
     *                       &lt;simpleContent>
     *                         &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
     *                           &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                           &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                           &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                           &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
     *                           &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                         &lt;/extension>
     *                       &lt;/simpleContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                 &lt;/sequence>
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
     *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "concept",
        "dataDimension",
        "categoryOptions"
    })
    public static class Category
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        protected CategoriesType.Category.Concept concept;
        @XmlElement(required = true)
        protected String dataDimension;
        @XmlElement(required = true)
        protected CategoriesType.Category.CategoryOptions categoryOptions;
        @XmlAttribute(name = "name")
        protected String name;
        @XmlAttribute(name = "created")
        protected String created;
        @XmlAttribute(name = "lastUpdated")
        protected String lastUpdated;
        @XmlAttribute(name = "href")
        @XmlSchemaType(name = "anyURI")
        protected String href;
        @XmlAttribute(name = "id")
        protected String id;

        /**
         * Gets the value of the concept property.
         * 
         * @return
         *     possible object is
         *     {@link CategoriesType.Category.Concept }
         *     
         */
        public CategoriesType.Category.Concept getConcept() {
            return concept;
        }

        /**
         * Sets the value of the concept property.
         * 
         * @param value
         *     allowed object is
         *     {@link CategoriesType.Category.Concept }
         *     
         */
        public void setConcept(CategoriesType.Category.Concept value) {
            this.concept = value;
        }

        /**
         * Gets the value of the dataDimension property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDataDimension() {
            return dataDimension;
        }

        /**
         * Sets the value of the dataDimension property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDataDimension(String value) {
            this.dataDimension = value;
        }

        /**
         * Gets the value of the categoryOptions property.
         * 
         * @return
         *     possible object is
         *     {@link CategoriesType.Category.CategoryOptions }
         *     
         */
        public CategoriesType.Category.CategoryOptions getCategoryOptions() {
            return categoryOptions;
        }

        /**
         * Sets the value of the categoryOptions property.
         * 
         * @param value
         *     allowed object is
         *     {@link CategoriesType.Category.CategoryOptions }
         *     
         */
        public void setCategoryOptions(CategoriesType.Category.CategoryOptions value) {
            this.categoryOptions = value;
        }

        /**
         * Gets the value of the name property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setName(String value) {
            this.name = value;
        }

        /**
         * Gets the value of the created property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCreated() {
            return created;
        }

        /**
         * Sets the value of the created property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCreated(String value) {
            this.created = value;
        }

        /**
         * Gets the value of the lastUpdated property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLastUpdated() {
            return lastUpdated;
        }

        /**
         * Sets the value of the lastUpdated property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLastUpdated(String value) {
            this.lastUpdated = value;
        }

        /**
         * Gets the value of the href property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getHref() {
            return href;
        }

        /**
         * Sets the value of the href property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setHref(String value) {
            this.href = value;
        }

        /**
         * Gets the value of the id property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setId(String value) {
            this.id = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                CategoriesType.Category.Concept theConcept;
                theConcept = this.getConcept();
                strategy.appendField(locator, this, "concept", buffer, theConcept);
            }
            {
                String theDataDimension;
                theDataDimension = this.getDataDimension();
                strategy.appendField(locator, this, "dataDimension", buffer, theDataDimension);
            }
            {
                CategoriesType.Category.CategoryOptions theCategoryOptions;
                theCategoryOptions = this.getCategoryOptions();
                strategy.appendField(locator, this, "categoryOptions", buffer, theCategoryOptions);
            }
            {
                String theName;
                theName = this.getName();
                strategy.appendField(locator, this, "name", buffer, theName);
            }
            {
                String theCreated;
                theCreated = this.getCreated();
                strategy.appendField(locator, this, "created", buffer, theCreated);
            }
            {
                String theLastUpdated;
                theLastUpdated = this.getLastUpdated();
                strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
            }
            {
                String theHref;
                theHref = this.getHref();
                strategy.appendField(locator, this, "href", buffer, theHref);
            }
            {
                String theId;
                theId = this.getId();
                strategy.appendField(locator, this, "id", buffer, theId);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CategoriesType.Category)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CategoriesType.Category that = ((CategoriesType.Category) object);
            {
                CategoriesType.Category.Concept lhsConcept;
                lhsConcept = this.getConcept();
                CategoriesType.Category.Concept rhsConcept;
                rhsConcept = that.getConcept();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "concept", lhsConcept), LocatorUtils.property(thatLocator, "concept", rhsConcept), lhsConcept, rhsConcept)) {
                    return false;
                }
            }
            {
                String lhsDataDimension;
                lhsDataDimension = this.getDataDimension();
                String rhsDataDimension;
                rhsDataDimension = that.getDataDimension();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dataDimension", lhsDataDimension), LocatorUtils.property(thatLocator, "dataDimension", rhsDataDimension), lhsDataDimension, rhsDataDimension)) {
                    return false;
                }
            }
            {
                CategoriesType.Category.CategoryOptions lhsCategoryOptions;
                lhsCategoryOptions = this.getCategoryOptions();
                CategoriesType.Category.CategoryOptions rhsCategoryOptions;
                rhsCategoryOptions = that.getCategoryOptions();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOptions", lhsCategoryOptions), LocatorUtils.property(thatLocator, "categoryOptions", rhsCategoryOptions), lhsCategoryOptions, rhsCategoryOptions)) {
                    return false;
                }
            }
            {
                String lhsName;
                lhsName = this.getName();
                String rhsName;
                rhsName = that.getName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                    return false;
                }
            }
            {
                String lhsCreated;
                lhsCreated = this.getCreated();
                String rhsCreated;
                rhsCreated = that.getCreated();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                    return false;
                }
            }
            {
                String lhsLastUpdated;
                lhsLastUpdated = this.getLastUpdated();
                String rhsLastUpdated;
                rhsLastUpdated = that.getLastUpdated();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                    return false;
                }
            }
            {
                String lhsHref;
                lhsHref = this.getHref();
                String rhsHref;
                rhsHref = that.getHref();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "href", lhsHref), LocatorUtils.property(thatLocator, "href", rhsHref), lhsHref, rhsHref)) {
                    return false;
                }
            }
            {
                String lhsId;
                lhsId = this.getId();
                String rhsId;
                rhsId = that.getId();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                CategoriesType.Category.Concept theConcept;
                theConcept = this.getConcept();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concept", theConcept), currentHashCode, theConcept);
            }
            {
                String theDataDimension;
                theDataDimension = this.getDataDimension();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataDimension", theDataDimension), currentHashCode, theDataDimension);
            }
            {
                CategoriesType.Category.CategoryOptions theCategoryOptions;
                theCategoryOptions = this.getCategoryOptions();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOptions", theCategoryOptions), currentHashCode, theCategoryOptions);
            }
            {
                String theName;
                theName = this.getName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
            }
            {
                String theCreated;
                theCreated = this.getCreated();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
            }
            {
                String theLastUpdated;
                theLastUpdated = this.getLastUpdated();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
            }
            {
                String theHref;
                theHref = this.getHref();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "href", theHref), currentHashCode, theHref);
            }
            {
                String theId;
                theId = this.getId();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CategoriesType.Category) {
                final CategoriesType.Category copy = ((CategoriesType.Category) draftCopy);
                if (this.concept!= null) {
                    CategoriesType.Category.Concept sourceConcept;
                    sourceConcept = this.getConcept();
                    CategoriesType.Category.Concept copyConcept = ((CategoriesType.Category.Concept) strategy.copy(LocatorUtils.property(locator, "concept", sourceConcept), sourceConcept));
                    copy.setConcept(copyConcept);
                } else {
                    copy.concept = null;
                }
                if (this.dataDimension!= null) {
                    String sourceDataDimension;
                    sourceDataDimension = this.getDataDimension();
                    String copyDataDimension = ((String) strategy.copy(LocatorUtils.property(locator, "dataDimension", sourceDataDimension), sourceDataDimension));
                    copy.setDataDimension(copyDataDimension);
                } else {
                    copy.dataDimension = null;
                }
                if (this.categoryOptions!= null) {
                    CategoriesType.Category.CategoryOptions sourceCategoryOptions;
                    sourceCategoryOptions = this.getCategoryOptions();
                    CategoriesType.Category.CategoryOptions copyCategoryOptions = ((CategoriesType.Category.CategoryOptions) strategy.copy(LocatorUtils.property(locator, "categoryOptions", sourceCategoryOptions), sourceCategoryOptions));
                    copy.setCategoryOptions(copyCategoryOptions);
                } else {
                    copy.categoryOptions = null;
                }
                if (this.name!= null) {
                    String sourceName;
                    sourceName = this.getName();
                    String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                    copy.setName(copyName);
                } else {
                    copy.name = null;
                }
                if (this.created!= null) {
                    String sourceCreated;
                    sourceCreated = this.getCreated();
                    String copyCreated = ((String) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                    copy.setCreated(copyCreated);
                } else {
                    copy.created = null;
                }
                if (this.lastUpdated!= null) {
                    String sourceLastUpdated;
                    sourceLastUpdated = this.getLastUpdated();
                    String copyLastUpdated = ((String) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                    copy.setLastUpdated(copyLastUpdated);
                } else {
                    copy.lastUpdated = null;
                }
                if (this.href!= null) {
                    String sourceHref;
                    sourceHref = this.getHref();
                    String copyHref = ((String) strategy.copy(LocatorUtils.property(locator, "href", sourceHref), sourceHref));
                    copy.setHref(copyHref);
                } else {
                    copy.href = null;
                }
                if (this.id!= null) {
                    String sourceId;
                    sourceId = this.getId();
                    String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                    copy.setId(copyId);
                } else {
                    copy.id = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CategoriesType.Category();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;element name="categoryOption" maxOccurs="unbounded" minOccurs="0">
         *           &lt;complexType>
         *             &lt;simpleContent>
         *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
         *                 &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                 &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                 &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                 &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
         *                 &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
         *               &lt;/extension>
         *             &lt;/simpleContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "categoryOption"
        })
        public static class CategoryOptions
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            protected List<CategoriesType.Category.CategoryOptions.CategoryOption> categoryOption;

            /**
             * Gets the value of the categoryOption property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the categoryOption property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getCategoryOption().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link CategoriesType.Category.CategoryOptions.CategoryOption }
             * 
             * 
             */
            public List<CategoriesType.Category.CategoryOptions.CategoryOption> getCategoryOption() {
                if (categoryOption == null) {
                    categoryOption = new ArrayList<CategoriesType.Category.CategoryOptions.CategoryOption>();
                }
                return this.categoryOption;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<CategoriesType.Category.CategoryOptions.CategoryOption> theCategoryOption;
                    theCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                    strategy.appendField(locator, this, "categoryOption", buffer, theCategoryOption);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof CategoriesType.Category.CategoryOptions)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final CategoriesType.Category.CategoryOptions that = ((CategoriesType.Category.CategoryOptions) object);
                {
                    List<CategoriesType.Category.CategoryOptions.CategoryOption> lhsCategoryOption;
                    lhsCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                    List<CategoriesType.Category.CategoryOptions.CategoryOption> rhsCategoryOption;
                    rhsCategoryOption = (((that.categoryOption!= null)&&(!that.categoryOption.isEmpty()))?that.getCategoryOption():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryOption", lhsCategoryOption), LocatorUtils.property(thatLocator, "categoryOption", rhsCategoryOption), lhsCategoryOption, rhsCategoryOption)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<CategoriesType.Category.CategoryOptions.CategoryOption> theCategoryOption;
                    theCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryOption", theCategoryOption), currentHashCode, theCategoryOption);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof CategoriesType.Category.CategoryOptions) {
                    final CategoriesType.Category.CategoryOptions copy = ((CategoriesType.Category.CategoryOptions) draftCopy);
                    if ((this.categoryOption!= null)&&(!this.categoryOption.isEmpty())) {
                        List<CategoriesType.Category.CategoryOptions.CategoryOption> sourceCategoryOption;
                        sourceCategoryOption = (((this.categoryOption!= null)&&(!this.categoryOption.isEmpty()))?this.getCategoryOption():null);
                        @SuppressWarnings("unchecked")
                        List<CategoriesType.Category.CategoryOptions.CategoryOption> copyCategoryOption = ((List<CategoriesType.Category.CategoryOptions.CategoryOption> ) strategy.copy(LocatorUtils.property(locator, "categoryOption", sourceCategoryOption), sourceCategoryOption));
                        copy.categoryOption = null;
                        if (copyCategoryOption!= null) {
                            List<CategoriesType.Category.CategoryOptions.CategoryOption> uniqueCategoryOptionl = copy.getCategoryOption();
                            uniqueCategoryOptionl.addAll(copyCategoryOption);
                        }
                    } else {
                        copy.categoryOption = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new CategoriesType.Category.CategoryOptions();
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;simpleContent>
             *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
             *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
             *       &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
             *       &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
             *       &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
             *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
             *     &lt;/extension>
             *   &lt;/simpleContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "value"
            })
            public static class CategoryOption
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                @XmlValue
                protected String value;
                @XmlAttribute(name = "name")
                protected String name;
                @XmlAttribute(name = "created")
                protected String created;
                @XmlAttribute(name = "lastUpdated")
                protected String lastUpdated;
                @XmlAttribute(name = "href")
                @XmlSchemaType(name = "anyURI")
                protected String href;
                @XmlAttribute(name = "id")
                protected String id;

                /**
                 * Gets the value of the value property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getValue() {
                    return value;
                }

                /**
                 * Sets the value of the value property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setValue(String value) {
                    this.value = value;
                }

                /**
                 * Gets the value of the name property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Gets the value of the created property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getCreated() {
                    return created;
                }

                /**
                 * Sets the value of the created property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setCreated(String value) {
                    this.created = value;
                }

                /**
                 * Gets the value of the lastUpdated property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getLastUpdated() {
                    return lastUpdated;
                }

                /**
                 * Sets the value of the lastUpdated property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setLastUpdated(String value) {
                    this.lastUpdated = value;
                }

                /**
                 * Gets the value of the href property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getHref() {
                    return href;
                }

                /**
                 * Sets the value of the href property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setHref(String value) {
                    this.href = value;
                }

                /**
                 * Gets the value of the id property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setId(String value) {
                    this.id = value;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        String theValue;
                        theValue = this.getValue();
                        strategy.appendField(locator, this, "value", buffer, theValue);
                    }
                    {
                        String theName;
                        theName = this.getName();
                        strategy.appendField(locator, this, "name", buffer, theName);
                    }
                    {
                        String theCreated;
                        theCreated = this.getCreated();
                        strategy.appendField(locator, this, "created", buffer, theCreated);
                    }
                    {
                        String theLastUpdated;
                        theLastUpdated = this.getLastUpdated();
                        strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                    }
                    {
                        String theHref;
                        theHref = this.getHref();
                        strategy.appendField(locator, this, "href", buffer, theHref);
                    }
                    {
                        String theId;
                        theId = this.getId();
                        strategy.appendField(locator, this, "id", buffer, theId);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof CategoriesType.Category.CategoryOptions.CategoryOption)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final CategoriesType.Category.CategoryOptions.CategoryOption that = ((CategoriesType.Category.CategoryOptions.CategoryOption) object);
                    {
                        String lhsValue;
                        lhsValue = this.getValue();
                        String rhsValue;
                        rhsValue = that.getValue();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                            return false;
                        }
                    }
                    {
                        String lhsName;
                        lhsName = this.getName();
                        String rhsName;
                        rhsName = that.getName();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                            return false;
                        }
                    }
                    {
                        String lhsCreated;
                        lhsCreated = this.getCreated();
                        String rhsCreated;
                        rhsCreated = that.getCreated();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                            return false;
                        }
                    }
                    {
                        String lhsLastUpdated;
                        lhsLastUpdated = this.getLastUpdated();
                        String rhsLastUpdated;
                        rhsLastUpdated = that.getLastUpdated();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                            return false;
                        }
                    }
                    {
                        String lhsHref;
                        lhsHref = this.getHref();
                        String rhsHref;
                        rhsHref = that.getHref();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "href", lhsHref), LocatorUtils.property(thatLocator, "href", rhsHref), lhsHref, rhsHref)) {
                            return false;
                        }
                    }
                    {
                        String lhsId;
                        lhsId = this.getId();
                        String rhsId;
                        rhsId = that.getId();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        String theValue;
                        theValue = this.getValue();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
                    }
                    {
                        String theName;
                        theName = this.getName();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                    }
                    {
                        String theCreated;
                        theCreated = this.getCreated();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                    }
                    {
                        String theLastUpdated;
                        theLastUpdated = this.getLastUpdated();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                    }
                    {
                        String theHref;
                        theHref = this.getHref();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "href", theHref), currentHashCode, theHref);
                    }
                    {
                        String theId;
                        theId = this.getId();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof CategoriesType.Category.CategoryOptions.CategoryOption) {
                        final CategoriesType.Category.CategoryOptions.CategoryOption copy = ((CategoriesType.Category.CategoryOptions.CategoryOption) draftCopy);
                        if (this.value!= null) {
                            String sourceValue;
                            sourceValue = this.getValue();
                            String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                            copy.setValue(copyValue);
                        } else {
                            copy.value = null;
                        }
                        if (this.name!= null) {
                            String sourceName;
                            sourceName = this.getName();
                            String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                            copy.setName(copyName);
                        } else {
                            copy.name = null;
                        }
                        if (this.created!= null) {
                            String sourceCreated;
                            sourceCreated = this.getCreated();
                            String copyCreated = ((String) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                            copy.setCreated(copyCreated);
                        } else {
                            copy.created = null;
                        }
                        if (this.lastUpdated!= null) {
                            String sourceLastUpdated;
                            sourceLastUpdated = this.getLastUpdated();
                            String copyLastUpdated = ((String) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                            copy.setLastUpdated(copyLastUpdated);
                        } else {
                            copy.lastUpdated = null;
                        }
                        if (this.href!= null) {
                            String sourceHref;
                            sourceHref = this.getHref();
                            String copyHref = ((String) strategy.copy(LocatorUtils.property(locator, "href", sourceHref), sourceHref));
                            copy.setHref(copyHref);
                        } else {
                            copy.href = null;
                        }
                        if (this.id!= null) {
                            String sourceId;
                            sourceId = this.getId();
                            String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                            copy.setId(copyId);
                        } else {
                            copy.id = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new CategoriesType.Category.CategoryOptions.CategoryOption();
                }

            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;simpleContent>
         *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
         *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="created" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="lastUpdated" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
         *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/extension>
         *   &lt;/simpleContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Concept
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlValue
            protected String value;
            @XmlAttribute(name = "name")
            protected String name;
            @XmlAttribute(name = "created")
            protected String created;
            @XmlAttribute(name = "lastUpdated")
            protected String lastUpdated;
            @XmlAttribute(name = "href")
            @XmlSchemaType(name = "anyURI")
            protected String href;
            @XmlAttribute(name = "id")
            protected String id;

            /**
             * Gets the value of the value property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            /**
             * Gets the value of the created property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCreated() {
                return created;
            }

            /**
             * Sets the value of the created property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCreated(String value) {
                this.created = value;
            }

            /**
             * Gets the value of the lastUpdated property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getLastUpdated() {
                return lastUpdated;
            }

            /**
             * Sets the value of the lastUpdated property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setLastUpdated(String value) {
                this.lastUpdated = value;
            }

            /**
             * Gets the value of the href property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getHref() {
                return href;
            }

            /**
             * Sets the value of the href property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setHref(String value) {
                this.href = value;
            }

            /**
             * Gets the value of the id property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getId() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setId(String value) {
                this.id = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theValue;
                    theValue = this.getValue();
                    strategy.appendField(locator, this, "value", buffer, theValue);
                }
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                {
                    String theCreated;
                    theCreated = this.getCreated();
                    strategy.appendField(locator, this, "created", buffer, theCreated);
                }
                {
                    String theLastUpdated;
                    theLastUpdated = this.getLastUpdated();
                    strategy.appendField(locator, this, "lastUpdated", buffer, theLastUpdated);
                }
                {
                    String theHref;
                    theHref = this.getHref();
                    strategy.appendField(locator, this, "href", buffer, theHref);
                }
                {
                    String theId;
                    theId = this.getId();
                    strategy.appendField(locator, this, "id", buffer, theId);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof CategoriesType.Category.Concept)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final CategoriesType.Category.Concept that = ((CategoriesType.Category.Concept) object);
                {
                    String lhsValue;
                    lhsValue = this.getValue();
                    String rhsValue;
                    rhsValue = that.getValue();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                        return false;
                    }
                }
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                {
                    String lhsCreated;
                    lhsCreated = this.getCreated();
                    String rhsCreated;
                    rhsCreated = that.getCreated();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                        return false;
                    }
                }
                {
                    String lhsLastUpdated;
                    lhsLastUpdated = this.getLastUpdated();
                    String rhsLastUpdated;
                    rhsLastUpdated = that.getLastUpdated();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdated", lhsLastUpdated), LocatorUtils.property(thatLocator, "lastUpdated", rhsLastUpdated), lhsLastUpdated, rhsLastUpdated)) {
                        return false;
                    }
                }
                {
                    String lhsHref;
                    lhsHref = this.getHref();
                    String rhsHref;
                    rhsHref = that.getHref();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "href", lhsHref), LocatorUtils.property(thatLocator, "href", rhsHref), lhsHref, rhsHref)) {
                        return false;
                    }
                }
                {
                    String lhsId;
                    lhsId = this.getId();
                    String rhsId;
                    rhsId = that.getId();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theValue;
                    theValue = this.getValue();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
                }
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                {
                    String theCreated;
                    theCreated = this.getCreated();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
                }
                {
                    String theLastUpdated;
                    theLastUpdated = this.getLastUpdated();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdated", theLastUpdated), currentHashCode, theLastUpdated);
                }
                {
                    String theHref;
                    theHref = this.getHref();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "href", theHref), currentHashCode, theHref);
                }
                {
                    String theId;
                    theId = this.getId();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof CategoriesType.Category.Concept) {
                    final CategoriesType.Category.Concept copy = ((CategoriesType.Category.Concept) draftCopy);
                    if (this.value!= null) {
                        String sourceValue;
                        sourceValue = this.getValue();
                        String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                        copy.setValue(copyValue);
                    } else {
                        copy.value = null;
                    }
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                    if (this.created!= null) {
                        String sourceCreated;
                        sourceCreated = this.getCreated();
                        String copyCreated = ((String) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                        copy.setCreated(copyCreated);
                    } else {
                        copy.created = null;
                    }
                    if (this.lastUpdated!= null) {
                        String sourceLastUpdated;
                        sourceLastUpdated = this.getLastUpdated();
                        String copyLastUpdated = ((String) strategy.copy(LocatorUtils.property(locator, "lastUpdated", sourceLastUpdated), sourceLastUpdated));
                        copy.setLastUpdated(copyLastUpdated);
                    } else {
                        copy.lastUpdated = null;
                    }
                    if (this.href!= null) {
                        String sourceHref;
                        sourceHref = this.getHref();
                        String copyHref = ((String) strategy.copy(LocatorUtils.property(locator, "href", sourceHref), sourceHref));
                        copy.setHref(copyHref);
                    } else {
                        copy.href = null;
                    }
                    if (this.id!= null) {
                        String sourceId;
                        sourceId = this.getId();
                        String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                        copy.setId(copyId);
                    } else {
                        copy.id = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new CategoriesType.Category.Concept();
            }

        }

    }

}
