//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.25 at 12:24:27 AM IST 
//


package org.openmrs.module.dhisintegration.api.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="dataElements">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="dataElement" maxOccurs="unbounded" minOccurs="0">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;attribute name="uid" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="type" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="disaggregations">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="disaggregation" maxOccurs="unbounded" minOccurs="0">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;attribute name="uid" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="reportTemplate" maxOccurs="unbounded" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="uid" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="code" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="periodType" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="dataValueTemplates">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;sequence>
 *                             &lt;element name="dataValueTemplate" maxOccurs="unbounded" minOccurs="0">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;attribute name="dataElement" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                     &lt;attribute name="disaggregation" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                           &lt;/sequence>
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "dataElements",
    "disaggregations",
    "reportTemplate"
})
@XmlRootElement(name = "reportTemplates", namespace = "")
public class ReportTemplates
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(namespace = "", required = true)
    protected ReportTemplates.DataElements dataElements;
    @XmlElement(namespace = "", required = true)
    protected ReportTemplates.Disaggregations disaggregations;
    @XmlElement(namespace = "")
    protected List<ReportTemplates.ReportTemplate> reportTemplate;

    /**
     * Gets the value of the dataElements property.
     * 
     * @return
     *     possible object is
     *     {@link ReportTemplates.DataElements }
     *     
     */
    public ReportTemplates.DataElements getDataElements() {
        return dataElements;
    }

    /**
     * Sets the value of the dataElements property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReportTemplates.DataElements }
     *     
     */
    public void setDataElements(ReportTemplates.DataElements value) {
        this.dataElements = value;
    }

    /**
     * Gets the value of the disaggregations property.
     * 
     * @return
     *     possible object is
     *     {@link ReportTemplates.Disaggregations }
     *     
     */
    public ReportTemplates.Disaggregations getDisaggregations() {
        return disaggregations;
    }

    /**
     * Sets the value of the disaggregations property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReportTemplates.Disaggregations }
     *     
     */
    public void setDisaggregations(ReportTemplates.Disaggregations value) {
        this.disaggregations = value;
    }

    /**
     * Gets the value of the reportTemplate property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reportTemplate property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReportTemplate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReportTemplates.ReportTemplate }
     * 
     * 
     */
    public List<ReportTemplates.ReportTemplate> getReportTemplate() {
        if (reportTemplate == null) {
            reportTemplate = new ArrayList<ReportTemplates.ReportTemplate>();
        }
        return this.reportTemplate;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            ReportTemplates.DataElements theDataElements;
            theDataElements = this.getDataElements();
            strategy.appendField(locator, this, "dataElements", buffer, theDataElements);
        }
        {
            ReportTemplates.Disaggregations theDisaggregations;
            theDisaggregations = this.getDisaggregations();
            strategy.appendField(locator, this, "disaggregations", buffer, theDisaggregations);
        }
        {
            List<ReportTemplates.ReportTemplate> theReportTemplate;
            theReportTemplate = (((this.reportTemplate!= null)&&(!this.reportTemplate.isEmpty()))?this.getReportTemplate():null);
            strategy.appendField(locator, this, "reportTemplate", buffer, theReportTemplate);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ReportTemplates)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ReportTemplates that = ((ReportTemplates) object);
        {
            ReportTemplates.DataElements lhsDataElements;
            lhsDataElements = this.getDataElements();
            ReportTemplates.DataElements rhsDataElements;
            rhsDataElements = that.getDataElements();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataElements", lhsDataElements), LocatorUtils.property(thatLocator, "dataElements", rhsDataElements), lhsDataElements, rhsDataElements)) {
                return false;
            }
        }
        {
            ReportTemplates.Disaggregations lhsDisaggregations;
            lhsDisaggregations = this.getDisaggregations();
            ReportTemplates.Disaggregations rhsDisaggregations;
            rhsDisaggregations = that.getDisaggregations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "disaggregations", lhsDisaggregations), LocatorUtils.property(thatLocator, "disaggregations", rhsDisaggregations), lhsDisaggregations, rhsDisaggregations)) {
                return false;
            }
        }
        {
            List<ReportTemplates.ReportTemplate> lhsReportTemplate;
            lhsReportTemplate = (((this.reportTemplate!= null)&&(!this.reportTemplate.isEmpty()))?this.getReportTemplate():null);
            List<ReportTemplates.ReportTemplate> rhsReportTemplate;
            rhsReportTemplate = (((that.reportTemplate!= null)&&(!that.reportTemplate.isEmpty()))?that.getReportTemplate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reportTemplate", lhsReportTemplate), LocatorUtils.property(thatLocator, "reportTemplate", rhsReportTemplate), lhsReportTemplate, rhsReportTemplate)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            ReportTemplates.DataElements theDataElements;
            theDataElements = this.getDataElements();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataElements", theDataElements), currentHashCode, theDataElements);
        }
        {
            ReportTemplates.Disaggregations theDisaggregations;
            theDisaggregations = this.getDisaggregations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "disaggregations", theDisaggregations), currentHashCode, theDisaggregations);
        }
        {
            List<ReportTemplates.ReportTemplate> theReportTemplate;
            theReportTemplate = (((this.reportTemplate!= null)&&(!this.reportTemplate.isEmpty()))?this.getReportTemplate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reportTemplate", theReportTemplate), currentHashCode, theReportTemplate);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ReportTemplates) {
            final ReportTemplates copy = ((ReportTemplates) draftCopy);
            if (this.dataElements!= null) {
                ReportTemplates.DataElements sourceDataElements;
                sourceDataElements = this.getDataElements();
                ReportTemplates.DataElements copyDataElements = ((ReportTemplates.DataElements) strategy.copy(LocatorUtils.property(locator, "dataElements", sourceDataElements), sourceDataElements));
                copy.setDataElements(copyDataElements);
            } else {
                copy.dataElements = null;
            }
            if (this.disaggregations!= null) {
                ReportTemplates.Disaggregations sourceDisaggregations;
                sourceDisaggregations = this.getDisaggregations();
                ReportTemplates.Disaggregations copyDisaggregations = ((ReportTemplates.Disaggregations) strategy.copy(LocatorUtils.property(locator, "disaggregations", sourceDisaggregations), sourceDisaggregations));
                copy.setDisaggregations(copyDisaggregations);
            } else {
                copy.disaggregations = null;
            }
            if ((this.reportTemplate!= null)&&(!this.reportTemplate.isEmpty())) {
                List<ReportTemplates.ReportTemplate> sourceReportTemplate;
                sourceReportTemplate = (((this.reportTemplate!= null)&&(!this.reportTemplate.isEmpty()))?this.getReportTemplate():null);
                @SuppressWarnings("unchecked")
                List<ReportTemplates.ReportTemplate> copyReportTemplate = ((List<ReportTemplates.ReportTemplate> ) strategy.copy(LocatorUtils.property(locator, "reportTemplate", sourceReportTemplate), sourceReportTemplate));
                copy.reportTemplate = null;
                if (copyReportTemplate!= null) {
                    List<ReportTemplates.ReportTemplate> uniqueReportTemplatel = copy.getReportTemplate();
                    uniqueReportTemplatel.addAll(copyReportTemplate);
                }
            } else {
                copy.reportTemplate = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ReportTemplates();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="dataElement" maxOccurs="unbounded" minOccurs="0">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;attribute name="uid" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="type" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "dataElement"
    })
    public static class DataElements
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(namespace = "")
        protected List<ReportTemplates.DataElements.DataElement> dataElement;

        /**
         * Gets the value of the dataElement property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the dataElement property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getDataElement().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ReportTemplates.DataElements.DataElement }
         * 
         * 
         */
        public List<ReportTemplates.DataElements.DataElement> getDataElement() {
            if (dataElement == null) {
                dataElement = new ArrayList<ReportTemplates.DataElements.DataElement>();
            }
            return this.dataElement;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ReportTemplates.DataElements.DataElement> theDataElement;
                theDataElement = (((this.dataElement!= null)&&(!this.dataElement.isEmpty()))?this.getDataElement():null);
                strategy.appendField(locator, this, "dataElement", buffer, theDataElement);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ReportTemplates.DataElements)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ReportTemplates.DataElements that = ((ReportTemplates.DataElements) object);
            {
                List<ReportTemplates.DataElements.DataElement> lhsDataElement;
                lhsDataElement = (((this.dataElement!= null)&&(!this.dataElement.isEmpty()))?this.getDataElement():null);
                List<ReportTemplates.DataElements.DataElement> rhsDataElement;
                rhsDataElement = (((that.dataElement!= null)&&(!that.dataElement.isEmpty()))?that.getDataElement():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dataElement", lhsDataElement), LocatorUtils.property(thatLocator, "dataElement", rhsDataElement), lhsDataElement, rhsDataElement)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ReportTemplates.DataElements.DataElement> theDataElement;
                theDataElement = (((this.dataElement!= null)&&(!this.dataElement.isEmpty()))?this.getDataElement():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataElement", theDataElement), currentHashCode, theDataElement);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ReportTemplates.DataElements) {
                final ReportTemplates.DataElements copy = ((ReportTemplates.DataElements) draftCopy);
                if ((this.dataElement!= null)&&(!this.dataElement.isEmpty())) {
                    List<ReportTemplates.DataElements.DataElement> sourceDataElement;
                    sourceDataElement = (((this.dataElement!= null)&&(!this.dataElement.isEmpty()))?this.getDataElement():null);
                    @SuppressWarnings("unchecked")
                    List<ReportTemplates.DataElements.DataElement> copyDataElement = ((List<ReportTemplates.DataElements.DataElement> ) strategy.copy(LocatorUtils.property(locator, "dataElement", sourceDataElement), sourceDataElement));
                    copy.dataElement = null;
                    if (copyDataElement!= null) {
                        List<ReportTemplates.DataElements.DataElement> uniqueDataElementl = copy.getDataElement();
                        uniqueDataElementl.addAll(copyDataElement);
                    }
                } else {
                    copy.dataElement = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ReportTemplates.DataElements();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;attribute name="uid" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="type" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class DataElement
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "uid", required = true)
            protected String uid;
            @XmlAttribute(name = "code", required = true)
            protected String code;
            @XmlAttribute(name = "name", required = true)
            protected String name;
            @XmlAttribute(name = "type", required = true)
            protected String type;

            /**
             * Gets the value of the uid property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getUid() {
                return uid;
            }

            /**
             * Sets the value of the uid property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setUid(String value) {
                this.uid = value;
            }

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            /**
             * Gets the value of the type property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getType() {
                return type;
            }

            /**
             * Sets the value of the type property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setType(String value) {
                this.type = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theUid;
                    theUid = this.getUid();
                    strategy.appendField(locator, this, "uid", buffer, theUid);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                {
                    String theType;
                    theType = this.getType();
                    strategy.appendField(locator, this, "type", buffer, theType);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ReportTemplates.DataElements.DataElement)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ReportTemplates.DataElements.DataElement that = ((ReportTemplates.DataElements.DataElement) object);
                {
                    String lhsUid;
                    lhsUid = this.getUid();
                    String rhsUid;
                    rhsUid = that.getUid();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUid), LocatorUtils.property(thatLocator, "uid", rhsUid), lhsUid, rhsUid)) {
                        return false;
                    }
                }
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                {
                    String lhsType;
                    lhsType = this.getType();
                    String rhsType;
                    rhsType = that.getType();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theUid;
                    theUid = this.getUid();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUid), currentHashCode, theUid);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                {
                    String theType;
                    theType = this.getType();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof ReportTemplates.DataElements.DataElement) {
                    final ReportTemplates.DataElements.DataElement copy = ((ReportTemplates.DataElements.DataElement) draftCopy);
                    if (this.uid!= null) {
                        String sourceUid;
                        sourceUid = this.getUid();
                        String copyUid = ((String) strategy.copy(LocatorUtils.property(locator, "uid", sourceUid), sourceUid));
                        copy.setUid(copyUid);
                    } else {
                        copy.uid = null;
                    }
                    if (this.code!= null) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                    if (this.type!= null) {
                        String sourceType;
                        sourceType = this.getType();
                        String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                        copy.setType(copyType);
                    } else {
                        copy.type = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new ReportTemplates.DataElements.DataElement();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="disaggregation" maxOccurs="unbounded" minOccurs="0">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;attribute name="uid" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "disaggregation"
    })
    public static class Disaggregations
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(namespace = "")
        protected List<ReportTemplates.Disaggregations.Disaggregation> disaggregation;

        /**
         * Gets the value of the disaggregation property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the disaggregation property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getDisaggregation().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ReportTemplates.Disaggregations.Disaggregation }
         * 
         * 
         */
        public List<ReportTemplates.Disaggregations.Disaggregation> getDisaggregation() {
            if (disaggregation == null) {
                disaggregation = new ArrayList<ReportTemplates.Disaggregations.Disaggregation>();
            }
            return this.disaggregation;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ReportTemplates.Disaggregations.Disaggregation> theDisaggregation;
                theDisaggregation = (((this.disaggregation!= null)&&(!this.disaggregation.isEmpty()))?this.getDisaggregation():null);
                strategy.appendField(locator, this, "disaggregation", buffer, theDisaggregation);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ReportTemplates.Disaggregations)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ReportTemplates.Disaggregations that = ((ReportTemplates.Disaggregations) object);
            {
                List<ReportTemplates.Disaggregations.Disaggregation> lhsDisaggregation;
                lhsDisaggregation = (((this.disaggregation!= null)&&(!this.disaggregation.isEmpty()))?this.getDisaggregation():null);
                List<ReportTemplates.Disaggregations.Disaggregation> rhsDisaggregation;
                rhsDisaggregation = (((that.disaggregation!= null)&&(!that.disaggregation.isEmpty()))?that.getDisaggregation():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "disaggregation", lhsDisaggregation), LocatorUtils.property(thatLocator, "disaggregation", rhsDisaggregation), lhsDisaggregation, rhsDisaggregation)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ReportTemplates.Disaggregations.Disaggregation> theDisaggregation;
                theDisaggregation = (((this.disaggregation!= null)&&(!this.disaggregation.isEmpty()))?this.getDisaggregation():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "disaggregation", theDisaggregation), currentHashCode, theDisaggregation);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ReportTemplates.Disaggregations) {
                final ReportTemplates.Disaggregations copy = ((ReportTemplates.Disaggregations) draftCopy);
                if ((this.disaggregation!= null)&&(!this.disaggregation.isEmpty())) {
                    List<ReportTemplates.Disaggregations.Disaggregation> sourceDisaggregation;
                    sourceDisaggregation = (((this.disaggregation!= null)&&(!this.disaggregation.isEmpty()))?this.getDisaggregation():null);
                    @SuppressWarnings("unchecked")
                    List<ReportTemplates.Disaggregations.Disaggregation> copyDisaggregation = ((List<ReportTemplates.Disaggregations.Disaggregation> ) strategy.copy(LocatorUtils.property(locator, "disaggregation", sourceDisaggregation), sourceDisaggregation));
                    copy.disaggregation = null;
                    if (copyDisaggregation!= null) {
                        List<ReportTemplates.Disaggregations.Disaggregation> uniqueDisaggregationl = copy.getDisaggregation();
                        uniqueDisaggregationl.addAll(copyDisaggregation);
                    }
                } else {
                    copy.disaggregation = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ReportTemplates.Disaggregations();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;attribute name="uid" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Disaggregation
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "uid", required = true)
            protected String uid;
            @XmlAttribute(name = "code", required = true)
            protected String code;
            @XmlAttribute(name = "name", required = true)
            protected String name;

            /**
             * Gets the value of the uid property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getUid() {
                return uid;
            }

            /**
             * Sets the value of the uid property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setUid(String value) {
                this.uid = value;
            }

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theUid;
                    theUid = this.getUid();
                    strategy.appendField(locator, this, "uid", buffer, theUid);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ReportTemplates.Disaggregations.Disaggregation)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ReportTemplates.Disaggregations.Disaggregation that = ((ReportTemplates.Disaggregations.Disaggregation) object);
                {
                    String lhsUid;
                    lhsUid = this.getUid();
                    String rhsUid;
                    rhsUid = that.getUid();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUid), LocatorUtils.property(thatLocator, "uid", rhsUid), lhsUid, rhsUid)) {
                        return false;
                    }
                }
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theUid;
                    theUid = this.getUid();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUid), currentHashCode, theUid);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof ReportTemplates.Disaggregations.Disaggregation) {
                    final ReportTemplates.Disaggregations.Disaggregation copy = ((ReportTemplates.Disaggregations.Disaggregation) draftCopy);
                    if (this.uid!= null) {
                        String sourceUid;
                        sourceUid = this.getUid();
                        String copyUid = ((String) strategy.copy(LocatorUtils.property(locator, "uid", sourceUid), sourceUid));
                        copy.setUid(copyUid);
                    } else {
                        copy.uid = null;
                    }
                    if (this.code!= null) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new ReportTemplates.Disaggregations.Disaggregation();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="uid" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="code" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="periodType" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="dataValueTemplates">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;sequence>
     *                   &lt;element name="dataValueTemplate" maxOccurs="unbounded" minOccurs="0">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;attribute name="dataElement" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                           &lt;attribute name="disaggregation" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                 &lt;/sequence>
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "name",
        "uid",
        "code",
        "periodType",
        "dataValueTemplates"
    })
    public static class ReportTemplate
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(namespace = "", required = true)
        protected String name;
        @XmlElement(namespace = "", required = true)
        protected String uid;
        @XmlElement(namespace = "", required = true)
        protected String code;
        @XmlElement(namespace = "", required = true)
        protected String periodType;
        @XmlElement(namespace = "", required = true)
        protected ReportTemplates.ReportTemplate.DataValueTemplates dataValueTemplates;

        /**
         * Gets the value of the name property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setName(String value) {
            this.name = value;
        }

        /**
         * Gets the value of the uid property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getUid() {
            return uid;
        }

        /**
         * Sets the value of the uid property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setUid(String value) {
            this.uid = value;
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        /**
         * Gets the value of the periodType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPeriodType() {
            return periodType;
        }

        /**
         * Sets the value of the periodType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPeriodType(String value) {
            this.periodType = value;
        }

        /**
         * Gets the value of the dataValueTemplates property.
         * 
         * @return
         *     possible object is
         *     {@link ReportTemplates.ReportTemplate.DataValueTemplates }
         *     
         */
        public ReportTemplates.ReportTemplate.DataValueTemplates getDataValueTemplates() {
            return dataValueTemplates;
        }

        /**
         * Sets the value of the dataValueTemplates property.
         * 
         * @param value
         *     allowed object is
         *     {@link ReportTemplates.ReportTemplate.DataValueTemplates }
         *     
         */
        public void setDataValueTemplates(ReportTemplates.ReportTemplate.DataValueTemplates value) {
            this.dataValueTemplates = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theName;
                theName = this.getName();
                strategy.appendField(locator, this, "name", buffer, theName);
            }
            {
                String theUid;
                theUid = this.getUid();
                strategy.appendField(locator, this, "uid", buffer, theUid);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            {
                String thePeriodType;
                thePeriodType = this.getPeriodType();
                strategy.appendField(locator, this, "periodType", buffer, thePeriodType);
            }
            {
                ReportTemplates.ReportTemplate.DataValueTemplates theDataValueTemplates;
                theDataValueTemplates = this.getDataValueTemplates();
                strategy.appendField(locator, this, "dataValueTemplates", buffer, theDataValueTemplates);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ReportTemplates.ReportTemplate)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ReportTemplates.ReportTemplate that = ((ReportTemplates.ReportTemplate) object);
            {
                String lhsName;
                lhsName = this.getName();
                String rhsName;
                rhsName = that.getName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                    return false;
                }
            }
            {
                String lhsUid;
                lhsUid = this.getUid();
                String rhsUid;
                rhsUid = that.getUid();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUid), LocatorUtils.property(thatLocator, "uid", rhsUid), lhsUid, rhsUid)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            {
                String lhsPeriodType;
                lhsPeriodType = this.getPeriodType();
                String rhsPeriodType;
                rhsPeriodType = that.getPeriodType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "periodType", lhsPeriodType), LocatorUtils.property(thatLocator, "periodType", rhsPeriodType), lhsPeriodType, rhsPeriodType)) {
                    return false;
                }
            }
            {
                ReportTemplates.ReportTemplate.DataValueTemplates lhsDataValueTemplates;
                lhsDataValueTemplates = this.getDataValueTemplates();
                ReportTemplates.ReportTemplate.DataValueTemplates rhsDataValueTemplates;
                rhsDataValueTemplates = that.getDataValueTemplates();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dataValueTemplates", lhsDataValueTemplates), LocatorUtils.property(thatLocator, "dataValueTemplates", rhsDataValueTemplates), lhsDataValueTemplates, rhsDataValueTemplates)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theName;
                theName = this.getName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
            }
            {
                String theUid;
                theUid = this.getUid();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUid), currentHashCode, theUid);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            {
                String thePeriodType;
                thePeriodType = this.getPeriodType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "periodType", thePeriodType), currentHashCode, thePeriodType);
            }
            {
                ReportTemplates.ReportTemplate.DataValueTemplates theDataValueTemplates;
                theDataValueTemplates = this.getDataValueTemplates();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataValueTemplates", theDataValueTemplates), currentHashCode, theDataValueTemplates);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ReportTemplates.ReportTemplate) {
                final ReportTemplates.ReportTemplate copy = ((ReportTemplates.ReportTemplate) draftCopy);
                if (this.name!= null) {
                    String sourceName;
                    sourceName = this.getName();
                    String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                    copy.setName(copyName);
                } else {
                    copy.name = null;
                }
                if (this.uid!= null) {
                    String sourceUid;
                    sourceUid = this.getUid();
                    String copyUid = ((String) strategy.copy(LocatorUtils.property(locator, "uid", sourceUid), sourceUid));
                    copy.setUid(copyUid);
                } else {
                    copy.uid = null;
                }
                if (this.code!= null) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
                if (this.periodType!= null) {
                    String sourcePeriodType;
                    sourcePeriodType = this.getPeriodType();
                    String copyPeriodType = ((String) strategy.copy(LocatorUtils.property(locator, "periodType", sourcePeriodType), sourcePeriodType));
                    copy.setPeriodType(copyPeriodType);
                } else {
                    copy.periodType = null;
                }
                if (this.dataValueTemplates!= null) {
                    ReportTemplates.ReportTemplate.DataValueTemplates sourceDataValueTemplates;
                    sourceDataValueTemplates = this.getDataValueTemplates();
                    ReportTemplates.ReportTemplate.DataValueTemplates copyDataValueTemplates = ((ReportTemplates.ReportTemplate.DataValueTemplates) strategy.copy(LocatorUtils.property(locator, "dataValueTemplates", sourceDataValueTemplates), sourceDataValueTemplates));
                    copy.setDataValueTemplates(copyDataValueTemplates);
                } else {
                    copy.dataValueTemplates = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ReportTemplates.ReportTemplate();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;element name="dataValueTemplate" maxOccurs="unbounded" minOccurs="0">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;attribute name="dataElement" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *                 &lt;attribute name="disaggregation" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "dataValueTemplate"
        })
        public static class DataValueTemplates
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElement(namespace = "")
            protected List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> dataValueTemplate;

            /**
             * Gets the value of the dataValueTemplate property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the dataValueTemplate property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getDataValueTemplate().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate }
             * 
             * 
             */
            public List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> getDataValueTemplate() {
                if (dataValueTemplate == null) {
                    dataValueTemplate = new ArrayList<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate>();
                }
                return this.dataValueTemplate;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> theDataValueTemplate;
                    theDataValueTemplate = (((this.dataValueTemplate!= null)&&(!this.dataValueTemplate.isEmpty()))?this.getDataValueTemplate():null);
                    strategy.appendField(locator, this, "dataValueTemplate", buffer, theDataValueTemplate);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ReportTemplates.ReportTemplate.DataValueTemplates)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ReportTemplates.ReportTemplate.DataValueTemplates that = ((ReportTemplates.ReportTemplate.DataValueTemplates) object);
                {
                    List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> lhsDataValueTemplate;
                    lhsDataValueTemplate = (((this.dataValueTemplate!= null)&&(!this.dataValueTemplate.isEmpty()))?this.getDataValueTemplate():null);
                    List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> rhsDataValueTemplate;
                    rhsDataValueTemplate = (((that.dataValueTemplate!= null)&&(!that.dataValueTemplate.isEmpty()))?that.getDataValueTemplate():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "dataValueTemplate", lhsDataValueTemplate), LocatorUtils.property(thatLocator, "dataValueTemplate", rhsDataValueTemplate), lhsDataValueTemplate, rhsDataValueTemplate)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> theDataValueTemplate;
                    theDataValueTemplate = (((this.dataValueTemplate!= null)&&(!this.dataValueTemplate.isEmpty()))?this.getDataValueTemplate():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataValueTemplate", theDataValueTemplate), currentHashCode, theDataValueTemplate);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof ReportTemplates.ReportTemplate.DataValueTemplates) {
                    final ReportTemplates.ReportTemplate.DataValueTemplates copy = ((ReportTemplates.ReportTemplate.DataValueTemplates) draftCopy);
                    if ((this.dataValueTemplate!= null)&&(!this.dataValueTemplate.isEmpty())) {
                        List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> sourceDataValueTemplate;
                        sourceDataValueTemplate = (((this.dataValueTemplate!= null)&&(!this.dataValueTemplate.isEmpty()))?this.getDataValueTemplate():null);
                        @SuppressWarnings("unchecked")
                        List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> copyDataValueTemplate = ((List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> ) strategy.copy(LocatorUtils.property(locator, "dataValueTemplate", sourceDataValueTemplate), sourceDataValueTemplate));
                        copy.dataValueTemplate = null;
                        if (copyDataValueTemplate!= null) {
                            List<ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate> uniqueDataValueTemplatel = copy.getDataValueTemplate();
                            uniqueDataValueTemplatel.addAll(copyDataValueTemplate);
                        }
                    } else {
                        copy.dataValueTemplate = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new ReportTemplates.ReportTemplate.DataValueTemplates();
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;attribute name="dataElement" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *       &lt;attribute name="disaggregation" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "")
            public static class DataValueTemplate
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                @XmlAttribute(name = "dataElement", required = true)
                protected String dataElement;
                @XmlAttribute(name = "disaggregation", required = true)
                protected String disaggregation;

                /**
                 * Gets the value of the dataElement property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDataElement() {
                    return dataElement;
                }

                /**
                 * Sets the value of the dataElement property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setDataElement(String value) {
                    this.dataElement = value;
                }

                /**
                 * Gets the value of the disaggregation property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDisaggregation() {
                    return disaggregation;
                }

                /**
                 * Sets the value of the disaggregation property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setDisaggregation(String value) {
                    this.disaggregation = value;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        String theDataElement;
                        theDataElement = this.getDataElement();
                        strategy.appendField(locator, this, "dataElement", buffer, theDataElement);
                    }
                    {
                        String theDisaggregation;
                        theDisaggregation = this.getDisaggregation();
                        strategy.appendField(locator, this, "disaggregation", buffer, theDisaggregation);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate that = ((ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate) object);
                    {
                        String lhsDataElement;
                        lhsDataElement = this.getDataElement();
                        String rhsDataElement;
                        rhsDataElement = that.getDataElement();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dataElement", lhsDataElement), LocatorUtils.property(thatLocator, "dataElement", rhsDataElement), lhsDataElement, rhsDataElement)) {
                            return false;
                        }
                    }
                    {
                        String lhsDisaggregation;
                        lhsDisaggregation = this.getDisaggregation();
                        String rhsDisaggregation;
                        rhsDisaggregation = that.getDisaggregation();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "disaggregation", lhsDisaggregation), LocatorUtils.property(thatLocator, "disaggregation", rhsDisaggregation), lhsDisaggregation, rhsDisaggregation)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        String theDataElement;
                        theDataElement = this.getDataElement();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataElement", theDataElement), currentHashCode, theDataElement);
                    }
                    {
                        String theDisaggregation;
                        theDisaggregation = this.getDisaggregation();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "disaggregation", theDisaggregation), currentHashCode, theDisaggregation);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate) {
                        final ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate copy = ((ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate) draftCopy);
                        if (this.dataElement!= null) {
                            String sourceDataElement;
                            sourceDataElement = this.getDataElement();
                            String copyDataElement = ((String) strategy.copy(LocatorUtils.property(locator, "dataElement", sourceDataElement), sourceDataElement));
                            copy.setDataElement(copyDataElement);
                        } else {
                            copy.dataElement = null;
                        }
                        if (this.disaggregation!= null) {
                            String sourceDisaggregation;
                            sourceDisaggregation = this.getDisaggregation();
                            String copyDisaggregation = ((String) strategy.copy(LocatorUtils.property(locator, "disaggregation", sourceDisaggregation), sourceDisaggregation));
                            copy.setDisaggregation(copyDisaggregation);
                        } else {
                            copy.disaggregation = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new ReportTemplates.ReportTemplate.DataValueTemplates.DataValueTemplate();
                }

            }

        }

    }

}
